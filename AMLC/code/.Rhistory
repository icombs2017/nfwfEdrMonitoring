# vpiData$timePoint = factor(vpiData$timePoint, levels(vpiData$timePoint)[c(2,1)])
vpiData
vpiData2 <- vpiData %>%
group_by(Site,timePoint, Species, class) %>%
summarise(count = sum(count)) %>%
group_by(Site,timePoint, Species) %>%
mutate(totalObservations = sum(count, na.rm = TRUE)) %>%
group_by(Site,timePoint, Species, class) %>%
mutate(abundance = ((count/totalObservations)*100)) %>%
select(-c(totalObservations))
# vpiData2 <- data.table(vpiData2)
# vpiData2[, `:=`(class, reorder(class, abundance))]
vpiMat <- vpiData2 %>%
select(-c(abundance)) %>%
tidyr::unite(sample, 1:3) %>%
spread(class,count) %>%
replace(is.na(.), 0) %>%
# mutate_at(c('sample'), as.character) %>%
column_to_rownames(var = 'sample')
dist_matrix <- as.matrix(bcdist(vpiMat),byrow = TRUE)
dist_tbl <- dist_matrix %>%
as_tibble(rownames = 'samples')
samples <- dist_tbl %>%
select(samples)
samples_lookup <- dist_tbl %>%
select(samples) %>%
separate(col = samples, into = c("timePoint", "Site", "Species"), sep = "_", remove = FALSE)
# doing PERMANOVA on a dissimilarity matrix, 'old' code is commented below.
set.seed(9999)
vpiMat1 <- vpiMat %>%
select(-c(`Bare Substrate`))
# filter(Site == -c("T-12a", "T-13a", "T-AP-3a"))
samplesLookupPerm <- vpiMat1 %>%
rownames_to_column(var = "samples") %>%
select(samples) %>%
separate(col = samples, into = c("Site", "timePoint", "Species"), sep = "_", remove = FALSE) %>%
column_to_rownames(var = "samples") %>%
mutate_at(c("Site", "timePoint", "Species"), as.factor)
vpiDist <- vegdist(vpiMat1, method = 'bray')
set.seed(9999)
distPerm <- adonis2(vpiDist ~ timePoint*Species, data = samplesLookupPerm, permutations = 9999, method = 'bray')
# strata = $Site
distPerm
distPermSite <- adonis2(vpiDist ~ Site, data = samplesLookupPerm, permutations = 9999, method = 'bray')
distPermSite
vpiPermTab = data.frame("Test" = "PERMANOVA", "Comparison" = "Class", "df" = vpiPerm[["aov.tab"]][["Df"]][[1]],"Pseudo.F" = vpiPerm[["aov.tab"]][["F.Model"]][[1]], "p.value" = vpiPerm[["aov.tab"]][["Pr(>F)"]][[1]]) %>%
add_row("Test" = " ", "Comparison" = "Time", "df" = vpiPerm[["aov.tab"]][["Df"]][[2]], "Pseudo.F" = vpiPerm[["aov.tab"]][["F.Model"]][[2]], "p.value" = vpiPerm[["aov.tab"]][["Pr(>F)"]][[2]]) %>%
add_row("Test" = " ", "Comparison" = "Treatment", "df" = vpiPerm[["aov.tab"]][["Df"]][[3]], "Pseudo.F" = vpiPerm[["aov.tab"]][["F.Model"]][[3]], "p.value" = vpiPerm[["aov.tab"]][["Pr(>F)"]][[3]]) %>%
add_row("Test" = " ", "Comparison" = "Class:Time", "df" = vpiPerm[["aov.tab"]][["Df"]][[4]], "Pseudo.F" = vpiPerm[["aov.tab"]][["F.Model"]][[4]], "p.value" = vpiPerm[["aov.tab"]][["Pr(>F)"]][[4]]) %>%
add_row("Test" = " ", "Comparison" = "Class:Treatment", "df" = vpiPerm[["aov.tab"]][["Df"]][[5]], "Pseudo.F" = vpiPerm[["aov.tab"]][["F.Model"]][[5]], "p.value" = vpiPerm[["aov.tab"]][["Pr(>F)"]][[5]]) %>%
add_row("Test" = " ", "Comparison" = "Time:Treatment", "df" = vpiPerm[["aov.tab"]][["Df"]][[6]], "Pseudo.F" = vpiPerm[["aov.tab"]][["F.Model"]][[6]], "p.value" = vpiPerm[["aov.tab"]][["Pr(>F)"]][[6]]) %>%
add_row("Test" = " ", "Comparison" = "Class:Time:Treatment", "df" = vpiPerm[["aov.tab"]][["Df"]][[7]], "Pseudo.F" = vpiPerm[["aov.tab"]][["F.Model"]][[7]], "p.value" = vpiPerm[["aov.tab"]][["Pr(>F)"]][[7]]) %>%
mutate_if(is.numeric, round, digits = 3) %>%
mutate(p.value = replace(p.value, p.value >= 0.05, "ns")) %>%
mutate(p.value = replace(p.value, p.value < 0.001, "< 0.001")) %>%
mutate_if(is.character, str_replace_all, pattern = "-", replacement = "â€“") %>%
flextable() %>%
set_header_labels(Data.set = "Data set") %>%
flextable::compose(part = "header", j = "df", value = as_paragraph("df")) %>%
flextable::compose(part = "header", j = "Pseudo.F", value = as_paragraph("Pseudo-F")) %>%
flextable::compose(part = "header", j = "p.value", value = as_paragraph(as_i("p"), "-value")) %>%
autofit() %>%
font(fontname = "Times New Roman", part = "all") %>%
fontsize(size = 12, part = "all") %>%
bold(part = "header") %>%
colformat_num(j = 'df', digits = 2) %>%
colformat_num(j = "Pseudo.F", digits = 2) %>%
colformat_num(j = "p.value", digits = 4, na_str = "ns") %>%
align_nottext_col(align = "center", header = TRUE, footer = TRUE) %>%
align(align = "center", j = "p.value")
# myColors <- paletteer_c("harrypotter::gryffindor", 6, direction = 1 )
#myColors <- paletteer_c("pals::ocean.balance", 6, direction = 1)
#Color Palette using a selection of Mote's preferred colors
# myColors <- c("#d2232a", "#ca581f", "#f26522", "#85b034", "#00ae9d", "#78779e")
# Using this just to plot the top 2% of species
vpiData3.1 <- vpiData2.1 %>%
filter(abundance > 1) %>%
droplevels() %>%
arrange(desc(abundance))
vpiData2.1 <- vpiData2 %>% filter(class != "Bare Substrate")
vpiData2.acer <- vpiData2.1 %>% filter(Species == "ACER")
vpiData2.apal <- vpiData2.1 %>% filter(Species == "APAL")
# myColors <- paletteer_c("harrypotter::gryffindor", 6, direction = 1 )
#myColors <- paletteer_c("pals::ocean.balance", 6, direction = 1)
#Color Palette using a selection of Mote's preferred colors
# myColors <- c("#d2232a", "#ca581f", "#f26522", "#85b034", "#00ae9d", "#78779e")
# Using this just to plot the top 2% of species
vpiData3.1 <- vpiData2.1 %>%
filter(abundance > 1) %>%
droplevels() %>%
arrange(desc(abundance))
# vpiData2.1 <- vpiData2 %>% filter(class != "Bare Substrate")
# vpiData1$class = factor(vpiData1$class, levels(vpiData1$class)[c(2,6,3,4,5,1)])
vpiStack3<- ggplot(vpiData3.1, aes(x = timePoint, y = abundance))+
geom_bar(aes(fill = factor(class)), position = position_stack(reverse = TRUE), stat = 'identity', color = 'black', alpha = 0.8)+
ylim(0,100)+
labs(y = "Relative Abundance (%)", fill = "Class", title = "Relative Species Abundance > 2%")+
scale_x_discrete(labels = c("Baseline", "12 Month"))+
scale_y_reverse()+
facet_wrap(.~Site, scales = 'free')
vpiStack <- vpiStack3+theme(
axis.text.x = element_text(size = 15, colour = "black", vjust = 0.5, hjust = 0.5, face= "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 40, face = "bold"),
axis.text.y = element_text(colour = "black", size = 30, face = "bold"),
legend.title = element_text(size = 40, face = "bold"),
legend.text = element_text(size = 36, face = "bold", colour = "black"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "white"),
panel.background = element_rect(fill = '#F5F5F5'),
plot.title = element_text(size = 40, face = "bold"),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(color="black"),
text = element_text(size=40, color="black"),
legend.position = "right")
vpiStack
# ggsave("C:/Users/gdalonzo/Documents/AMLC/figures/VPIstackplot.png", plot = vpiStack, width = 20, height = 15, units = 'in', dpi = 600)
# ggsave("C:/Users/gdalonzo/Documents/AMLC/figures", plot = vpiStack, width = 20, height = 15, units = "in", dpi = 600)
vpiStack
vpiStack3<- ggplot(vpiData3.1, aes(x = timePoint, y = abundance))+
geom_bar(aes(fill = factor(class)), position = position_stack(reverse = TRUE), stat = 'identity', color = 'black', alpha = 0.8)+
ylim(0,100)+
labs(y = "Relative Abundance (%)", fill = "Class", title = "Relative Species Abundance > 2%")+
scale_x_discrete(labels = c("Baseline", "12 Month"))+
scale_y_reverse()+
facet_wrap(.~Site, x.scales = 'free')
?facet_wrap
vpiStack3<- ggplot(vpiData3.1, aes(x = timePoint, y = abundance))+
geom_bar(aes(fill = factor(class)), position = position_stack(reverse = TRUE), stat = 'identity', color = 'black', alpha = 0.8)+
ylim(0,100)+
labs(y = "Relative Abundance (%)", fill = "Class", title = "Relative Species Abundance > 2%")+
scale_x_discrete(labels = c("Baseline", "12 Month"))+
scale_y_reverse()+
facet_wrap(.~Site, scales = 'free_x')
vpiStack3
?facet_wrap
vpiStack3<- ggplot(vpiData3.1, aes(x = timePoint, y = abundance))+
geom_bar(aes(fill = factor(class)), position = position_stack(reverse = TRUE), stat = 'identity', color = 'black', alpha = 0.8)+
ylim(0,100)+
labs(y = "Relative Abundance (%)", fill = "Class", title = "Relative Species Abundance > 2%")+
scale_x_discrete(labels = c("Baseline", "12 Month"))+
# scale_y_reverse()+
facet_wrap(.~Site, scales = 'free_x')
vpiStack3
?scale_y_reverse
vpiStack3<- ggplot(vpiData3.1, aes(x = timePoint, y = abundance))+
geom_bar(aes(fill = factor(class)), position = position_stack(reverse = TRUE), stat = 'identity', color = 'black', alpha = 0.8)+
# ylim(0,100)+
labs(y = "Relative Abundance (%)", fill = "Class", title = "Relative Species Abundance > 2%")+
scale_x_discrete(labels = c("Baseline", "12 Month"))+
scale_y_reverse(limits = c(0,100))+
facet_wrap(.~Site, scales = 'free_x')
vpiStack3
vpiStack3<- ggplot(vpiData3.1, aes(x = timePoint, y = abundance))+
geom_bar(aes(fill = factor(class)), position = position_stack(reverse = TRUE), stat = 'identity', color = 'black', alpha = 0.8)+
# ylim(0,100)+
labs(y = "Relative Abundance (%)", fill = "Class", title = "Relative Species Abundance > 2%")+
scale_x_discrete(labels = c("Baseline", "12 Month"))+
scale_y_reverse(limits = c(0,100))+
facet_wrap(.~Site, scales = 'free_x')
vpiStack3
read_plus <- function(flnm) {
read_csv(flnm) %>%
mutate_all(as.character) %>%
mutate(filename = flnm)
}
tagData1 <-
list.files(path = "../../data/TagLab", pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.)) %>%
as.tibble()
tagData <- tagData1 %>%
tidyr::separate(filename, into=c("remove", "Site"),extra = 'merge',sep = 18) %>%
tidyr::separate(Site, into=c("Site", "remove"),sep = "TagLab.csv") %>%
dplyr::select(-c(remove)) %>%
mutate_if(is.character, str_replace_all, pattern = "_", replacement = "-") %>%
rename(Species = `TagLab Class name`, Date = `TagLab Date`, Area = `TagLab Area`) %>%
mutate_at(c("Date", "Site", "Species"), as.factor) %>%
mutate_at(c("Area"), as.numeric) %>%
select(Date, Site, Species, Area) %>%
group_by(Date, Site) %>%
filter(Species == c("Acropora cervicornis", "Acropora palmata")) %>%
droplevels()
tagApal <- tagData %>%
filter(Species == "Acropora palmata") %>%
droplevels() %>%
tidyr::separate(Site, into = c("Site", "remove"), extra = 'merge', sep = 7) %>%
mutate_at(c("Site"), as.factor) %>%
select(-c("remove"))
tagAcer <- tagData %>%
filter(Species == "Acropora cervicornis") %>%
droplevels() %>%
tidyr::separate(Site, into = c("Site", "remove"), extra = 'merge', sep = 5) %>%
mutate_at(c("Site"), as.factor) %>%
select(-c("remove"))
tagData2 <- rbind(tagApal, tagAcer)
View(tagData2)
View(tagData1)
View(tagData1)
knitr::opts_chunk$set(warning = FALSE, fig.align = 'left')
library(magrittr)
if (!require("pacman")) install.packages("pacman")
pacman::p_load("ggplot2","officer","ggpubr", "rcompanion", "RColorBrewer", "patchwork", "magrittr","reshape2", "stringr", "plyr", "dplyr", "flextable", "tidyr", "tibble", "vegan", "forcats", "readr", "metafolio", "FSA","viridis", "paletteer", "purrr", "data.table", "ecodist", "glue")
pacman::p_load_gh("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
read_plus <- function(flnm) {
read_csv(flnm) %>%
mutate(filename = flnm)
}
vpiData1 <-
list.files(path = "../../data/vpiData", pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.))
#Sort out data to have proper columns for all the info i want, this might need to be changed to figure out the Marks vs Plot thing
vpiData <- vpiData1 %>%
tidyr::separate(filename, into=c("Date", "Site"),extra = 'merge',sep = "(?=T)") %>%
tidyr::separate(Date, into=c("remove", "Date"),sep = "../data/vpiData/") %>%
tidyr::separate(Site, into = c("Site", "delete"),sep = ".pqs") %>%
dplyr::select(-c(remove, delete)) %>%
mutate_if(is.character, str_replace_all, pattern = "_", replacement = "-") %>%
tidyr::separate(Date, into = c("Date", "remove"), sep = 10) %>%
dplyr::select(-remove) %>%
tidyr::separate(Site, into = c("Site", "Plot"), sep = "(?=plot)", extra = "merge") %>%
tidyr::separate(Site, into = c("Site", "Mark"), sep = "(?=mark)", extra = "merge") %>%
tidyr::separate(Plot, into = c("Plot", "Mark"), sep = "(?=mark)", extra = "merge" ) %>%
dplyr::rename(abundance = `%`) %>%
tidyr::drop_na(abundance) %>%
arrange(desc(abundance))
#Changing the Date to factors
vpiData$Date<-as.factor(vpiData$Date)
vpiData$Date<-strptime(vpiData$Date,format="%Y-%m-%d") #defining what is the original format of your date
vpiData$Date<-as.Date(vpiData$Date,format="%Y-%m-%d")
vpiData$Species <- if_else(nchar(vpiData$Site) <= 5, "ACER", "APAL")
vpiData$Site <- as.factor(vpiData$Site)
#Making some corrections in the naming
vpiData$class <- gsub("Crustose coralline algae natans","Crustose coralline algae",vpiData$class)
vpiData$class <- gsub("Rubble", "Bare Substrate", vpiData$class)
vpiData$timePoint <- gsub("1 year", "Y1", vpiData$timePoint)
vpiData$class <- as.factor(vpiData$class)
vpiData$Site <- as.factor(vpiData$Site)
vpiData$timePoint <- as.factor(vpiData$timePoint)
# vpiData$timePoint = factor(vpiData$timePoint, levels(vpiData$timePoint)[c(2,1)])
vpiData
vpiData2 <- vpiData %>%
group_by(Site,timePoint, Species, class) %>%
summarise(count = sum(count)) %>%
group_by(Site,timePoint, Species) %>%
mutate(totalObservations = sum(count, na.rm = TRUE)) %>%
group_by(Site,timePoint, Species, class) %>%
mutate(abundance = ((count/totalObservations)*100)) %>%
select(-c(totalObservations))
# vpiData2 <- data.table(vpiData2)
# vpiData2[, `:=`(class, reorder(class, abundance))]
names(vpiData)
vpiData2 <- vpiData %>%
group_by(Site,timePoint, Species, class) %>%
filter(Species != "Bare Substrate") %>%
summarise(count = sum(count)) %>%
group_by(Site,timePoint, Species) %>%
mutate(totalObservations = sum(count, na.rm = TRUE)) %>%
group_by(Site,timePoint, Species, class) %>%
mutate(abundance = ((count/totalObservations)*100)) %>%
select(-c(totalObservations))
vpiMat <- vpiData2 %>%
select(-c(abundance)) %>%
tidyr::unite(sample, 1:3) %>%
spread(class,count) %>%
replace(is.na(.), 0) %>%
# mutate_at(c('sample'), as.character) %>%
column_to_rownames(var = 'sample')
dist_matrix <- as.matrix(bcdist(vpiMat),byrow = TRUE)
dist_tbl <- dist_matrix %>%
as_tibble(rownames = 'samples')
samples <- dist_tbl %>%
select(samples)
samples_lookup <- dist_tbl %>%
select(samples) %>%
separate(col = samples, into = c("timePoint", "Site", "Species"), sep = "_", remove = FALSE)
vpiMat1 <- vpiMat
samplesLookupPerm <- vpiMat1 %>%
rownames_to_column(var = "samples") %>%
select(samples) %>%
separate(col = samples, into = c("Site", "timePoint", "Species"), sep = "_", remove = FALSE) %>%
column_to_rownames(var = "samples") %>%
mutate_at(c("Site", "timePoint", "Species"), as.factor)
vpiDist <- vegdist(vpiMat1, method = 'bray')
set.seed(9999)
distPerm <- adonis2(vpiDist ~ timePoint*Species, data = samplesLookupPerm, permutations = 9999, method = 'bray')
# strata = $Site
distPerm
View(vpiData2)
vpiData2 <- vpiData %>%
group_by(Site,timePoint, Species, class) %>%
filter(Species != "Bare Substrate")
View(vpiData2)
View(vpiData2)
vpiData2 <- vpiData %>%
group_by(Site,timePoint, Species, class) %>%
filter(Species != c("Bare Substrate")) %>%
summarise(count = sum(count)) %>%
group_by(Site,timePoint, Species) %>%
mutate(totalObservations = sum(count, na.rm = TRUE)) %>%
group_by(Site,timePoint, Species, class) %>%
mutate(abundance = ((count/totalObservations)*100)) %>%
select(-c(totalObservations))
View(vpiData2)
vpiData2 <- vpiData %>%
group_by(Site,timePoint, Species, class) %>%
filter(class != c("Bare Substrate")) %>%
summarise(count = sum(count)) %>%
group_by(Site,timePoint, Species) %>%
mutate(totalObservations = sum(count, na.rm = TRUE)) %>%
group_by(Site,timePoint, Species, class) %>%
mutate(abundance = ((count/totalObservations)*100)) %>%
select(-c(totalObservations))
View(vpiData2)
vpiMat <- vpiData2 %>%
select(-c(abundance)) %>%
tidyr::unite(sample, 1:3) %>%
spread(class,count) %>%
replace(is.na(.), 0) %>%
# mutate_at(c('sample'), as.character) %>%
column_to_rownames(var = 'sample')
dist_matrix <- as.matrix(bcdist(vpiMat),byrow = TRUE)
dist_tbl <- dist_matrix %>%
as_tibble(rownames = 'samples')
samples <- dist_tbl %>%
select(samples)
samples_lookup <- dist_tbl %>%
select(samples) %>%
separate(col = samples, into = c("timePoint", "Site", "Species"), sep = "_", remove = FALSE)
set.seed(9999)
vpiMat1 <- vpiMat
# %>%
#   select(-c(`Bare Substrate`))
# filter(Site == -c("T-12a", "T-13a", "T-AP-3a"))
samplesLookupPerm <- vpiMat1 %>%
rownames_to_column(var = "samples") %>%
select(samples) %>%
separate(col = samples, into = c("Site", "timePoint", "Species"), sep = "_", remove = FALSE) %>%
column_to_rownames(var = "samples") %>%
mutate_at(c("Site", "timePoint", "Species"), as.factor)
vpiDist <- vegdist(vpiMat1, method = 'bray')
set.seed(9999)
distPerm <- adonis2(vpiDist ~ timePoint*Species, data = samplesLookupPerm, permutations = 9999, method = 'bray')
# strata = $Site
distPerm
names(vpiData2)
distPerm <- adonis2(vpiDist ~ timePoint*Species*timePoint, data = samplesLookupPerm, permutations = 9999, method = 'bray')
# strata = $Site
distPerm
vpiData2.1 <- vpiData2 %>% filter(class != "Bare Substrate")
vpiData2.1 <- vpiData2 %>% filter(class != "Bare Substrate")
vpiData2.acer <- vpiData2.1 %>% filter(Species == "ACER")
vpiData2.apal <- vpiData2.1 %>% filter(Species == "APAL")
vpiData2.bis <- vpiData2.apal %>%
filter(Site %in% c("T-AP-5", "T-AP-10"))
# Using this just to plot the top 2% of species
vpiData3.bis <- vpiData2.bis %>%
filter(abundance > 1) %>%
droplevels() %>%
arrange(desc(abundance))
vpiStackC<- ggplot(vpiData3.bis, aes(x = timePoint, y = abundance))+
geom_bar(aes(fill = factor(class)), position = position_stack(reverse = TRUE), stat = 'identity', color = 'black', alpha = 0.8)+
ylim(0,100)+
labs(y = "Relative Abundance (%)", fill = "Class", title = "Relative Species Abundance > 1%")+
scale_x_discrete(labels = c("Baseline", "12 Month"))+
#scale_y_reverse()+
facet_wrap(.~Site, scales = 'free_x')
vpiStackC
vpiStackC
vpiStackC<- ggplot(vpiData3.bis, aes(x = timePoint, y = abundance))+
geom_bar(aes(fill = factor(class)), position = position_stack(reverse = FALSE), stat = 'identity', color = 'black', alpha = 0.8)+
ylim(0,100)+
labs(y = "Relative Abundance (%)", fill = "Class", title = "Relative Species Abundance > 1%")+
scale_x_discrete(labels = c("Baseline", "12 Month"))+
#scale_y_reverse()+
facet_wrap(.~Site, scales = 'free_x')
vpiStackC
?position_stack
vpiStackC
vpiStackC<- ggplot(vpiData3.bis, aes(x = timePoint, y = abundance))+
geom_bar(aes(fill = factor(class)), position = position_stack(reverse = FALSE), stat = 'identity', color = 'black', alpha = 0.8)+
ylim(0,100)+
labs(y = "Relative Abundance (%)", fill = "Class", title = "Relative Species Abundance > 1%")+
scale_x_discrete(labels = c("Baseline", "12 Month"))
vpiStackC
vpiStackC<- ggplot(vpiData3.bis, aes(x = timePoint, y = abundance))+
geom_bar(aes(fill = factor(class)), position = position_stack(reverse = FALSE), stat = 'identity', color = 'black', alpha = 0.8)+
ylim(0,100)+
labs(y = "Relative Abundance (%)", fill = "Class", title = "Relative Species Abundance > 1%")+
scale_x_discrete(labels = c("Baseline", "12 Month"))+
#scale_y_reverse()+
facet_wrap(.~Site, scales = 'free_x')
vpiStackC
knitr::opts_chunk$set(warning = FALSE, fig.align = 'left')
library(magrittr)
if (!require("pacman")) install.packages("pacman")
pacman::p_load("ggplot2","officer","ggpubr", "rcompanion", "RColorBrewer", "patchwork", "magrittr","reshape2", "stringr", "plyr", "dplyr", "flextable", "tidyr", "tibble", "vegan", "paletteer", "purrr", "readr")
read_plus <- function(flnm) {
read_csv(flnm) %>%
mutate_all(as.character) %>%
mutate(filename = flnm)
}
tagData1 <-
list.files(path = "../../data/TagLab", pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.)) %>%
as.tibble()
tagData <- tagData1 %>%
tidyr::separate(filename, into=c("remove", "Site"),extra = 'merge',sep = 18) %>%
tidyr::separate(Site, into=c("Site", "remove"),sep = "TagLab.csv") %>%
dplyr::select(-c(remove)) %>%
mutate_if(is.character, str_replace_all, pattern = "_", replacement = "-") %>%
rename(Species = `TagLab Class name`, Date = `TagLab Date`, Area = `TagLab Area`) %>%
mutate_at(c("Date", "Site", "Species"), as.factor) %>%
mutate_at(c("Area"), as.numeric) %>%
select(Date, Site, Species, Area) %>%
group_by(Date, Site) %>%
filter(Species == c("Acropora cervicornis", "Acropora palmata")) %>%
droplevels()
tagApal <- tagData %>%
filter(Species == "Acropora palmata") %>%
droplevels() %>%
tidyr::separate(Site, into = c("Site", "remove"), extra = 'merge', sep = 7) %>%
mutate_at(c("Site"), as.factor) %>%
select(-c("remove"))
tagAcer <- tagData %>%
filter(Species == "Acropora cervicornis") %>%
droplevels() %>%
tidyr::separate(Site, into = c("Site", "remove"), extra = 'merge', sep = 5) %>%
mutate_at(c("Site"), as.factor) %>%
select(-c("remove"))
tagData2 <- rbind(tagApal, tagAcer)
sizeOfACER <- 200
sizeOfAPAL <- 100
tagData3 <- tagData2 %>%
group_by(Site) %>%
summarise(sum(Area))
tagData3
tagData3 <- tagData2 %>%
group_by(Site) %>%
summarise(biomass = sum(Area))
tagData3
View(tagData3)
tagData3 <- tagData2 %>%
group_by(Site, Species) %>%
summarise(biomass = sum(Area
)
)
tagData3 <- tagData2 %>%
group_by(Site, Species) %>%
summarise(biomass = sum(Area))
View(tagData3)
tagData3AP <- tagData3 %>%
filter(Species == "Acropora palmata") %>%
mutate(percentCover = Area/sizeOfAPAL)
tagData3 <- tagData2 %>%
group_by(Site, Species) %>%
summarise(biomass = sum(Area)/10000)
tagData3AP <- tagData3 %>%
filter(Species == "Acropora palmata") %>%
mutate(percentCover = biomass/sizeOfAPAL)
tagData3AP <- tagData3 %>%
filter(Species == "Acropora palmata") %>%
mutate(percentCover = biomass/sizeOfAPAL)
View(tagData3AP)
tagData3AC <- tagData3 %>%
filter(Species == "Acropora cervicornis") %>%
mutate(percentCover = (biomass/sizeOfACER)*100)
tagData4 <- rbind(tagData3AP, tagData3AC)
tagData4
sizeOfACER <- 200
sizeOfAPAL <- 100
tagData3 <- tagData2 %>%
group_by(Site, Species) %>%
summarise(biomass = sum(Area)/10000)
tagData3AP <- tagData3 %>%
filter(Species == "Acropora palmata") %>%
mutate(percentCover = (biomass/sizeOfAPAL)*100)
tagData3AC <- tagData3 %>%
filter(Species == "Acropora cervicornis") %>%
mutate(percentCover = (biomass/sizeOfACER)*100)
tagData4 <- rbind(tagData3AP, tagData3AC)
View(tagData4)
tagStack1 <- ggplot(tagData4, aes(x = Species, y = percentCover, fill = Species))+
geom_bar(stat = 'identity', color = 'black', position = position_stack(reverse = TRUE), alpha = 0.8)+
ylim(0,100)+
labs(y = "Area", fill = "Species", title = "2D Surface Area")+
scale_fill_manual(values = myColors)+
scale_x_discrete(guide = guide_axis(angle = 90))
myColors <- paletteer_c("pals::ocean.balance", 10, direction = 1)
tagStack1 <- ggplot(tagData4, aes(x = Species, y = percentCover, fill = Species))+
geom_bar(stat = 'identity', color = 'black', position = position_stack(reverse = TRUE), alpha = 0.8)+
ylim(0,100)+
labs(y = "Area", fill = "Species", title = "2D Surface Area")+
scale_fill_manual(values = myColors)+
scale_x_discrete(guide = guide_axis(angle = 90))
tagStack1
tagStack1 <- ggplot(tagData4, aes(x = Species, y = percentCover, fill = Species))+
geom_bar(stat = 'identity', color = 'black', position = position_stack(reverse = TRUE), alpha = 0.8)+
ylim(0,1)+
labs(y = "Area", fill = "Species", title = "2D Surface Area")+
scale_fill_manual(values = myColors)+
scale_x_discrete(guide = guide_axis(angle = 90)) +
facet_wrap(.~ Site)
tagStack1
tagStack1 <- ggplot(tagData4, aes(x = Species, y = percentCover, fill = Species))+
geom_bar(stat = 'identity', color = 'black', position = position_stack(reverse = TRUE), alpha = 0.8)+
ylim(0,1)+
labs(y = "Area", fill = "Species", title = "2D Surface Area")+
scale_fill_manual(values = myColors)+
scale_x_discrete(guide = guide_axis(angle = 90))
tagStack1
