facet_wrap(.~Site, scales = 'free')
apalStack <- apalStack1 +theme(
# Title
plot.title = element_text(size = 40, face = "bold"),
# X Axis
axis.text.x = element_text(size = 15, colour = "black", vjust = 0.5, hjust = 0.5, face= "bold"),
axis.title.x = element_blank(),
# Y Axis
axis.title.y = element_text(size = 40, face = "bold"),
axis.text.y = element_text(colour = "black", size = 30, face = "bold"),
# Axis Lines and Ticks
axis.line = element_line(colour = "black"),
axis.ticks = element_line(color="black"),
# Legend
legend.title = element_text(size = 40, face = "bold"),
legend.text = element_text(size = 36, face = "bold", colour = "black"),
legend.position = "right",
# Grid and Background
panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "white"),
panel.background = element_rect(fill = '#F5F5F5'),
# Text
text = element_text(size=40, color="black"))
apalStack
comboPlot <- acerStack/apalStack + plot_layout(guides = 'collect')
ggsave("../figures/comboPlot.png", plot = comboPlot, width = 20, height = 15, units = 'in', dpi = 600)
ggsave("../figures/acerStackVPI.png", plot = acerStack, width = 20, height = 15, units = 'in', dpi = 600)
ggsave("../figures/apalStackVPI.png", plot = apalStack, width = 20, height = 15, units = 'in', dpi = 600)
vpiMat <- vpiData2 %>%
# group_by(Site, timePoint, species, class) %>%
# dplyr::summarise(totalCount = sum(count)) %>%
na.omit(class) %>%
tidyr::unite(sample, 1:3) %>%
spread(class,totalCount) %>%
replace(is.na(.), 0) %>%
column_to_rownames(var = 'sample')
vpiMat <- vpiData2 %>%
group_by(Date, Site, timePoint, species, class) %>%
dplyr::summarise(totalCount = sum(count)) %>%
na.omit(class) %>%
tidyr::unite(sample, 1:3) %>%
spread(class,totalCount) %>%
replace(is.na(.), 0) %>%
column_to_rownames(var = 'sample')
knitr::opts_chunk$set(warning = FALSE, fig.align = 'left')
library(magrittr)
if (!require("pacman")) install.packages("pacman")
pacman::p_load("ggplot2","officer","ggpubr", "rcompanion", "RColorBrewer", "patchwork", "magrittr","reshape2", "stringr", "plyr", "dplyr", "flextable", "tidyr", "tibble", "vegan", "forcats", "readr", "metafolio", "FSA","viridis", "paletteer", "purrr", "data.table", "ecodist", "glue", "gtools")
pacman::p_load_gh("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
read_plus <- function(flnm) {
read_csv(flnm) %>%
mutate(filename = flnm)
}
vpiData1 <-
list.files(path = "../data/vpiData", pattern = "*.csv",
full.names = T) %>%
map_dfr(~read_plus(.))
#Sort out data to have proper columns for all the info i want, this might need to be changed to figure out the Marks vs Plot thing
vpiData <- vpiData1 %>%
tidyr::separate(filename, into=c("Date", "Site"),extra = 'merge',sep = "(?=T)") %>%
tidyr::separate(Date, into=c("remove", "Date"),sep = "../data/vpiData/") %>%
tidyr::separate(Site, into = c("Site", "delete"),sep = ".pqs") %>%
dplyr::select(-c(remove, delete)) %>%
mutate_if(is.character, str_replace_all, pattern = "_", replacement = "-") %>%
tidyr::separate(Date, into = c("Date", "remove"), sep = 10) %>%
dplyr::select(-remove) %>%
tidyr::separate(Site, into = c("Site", "Plot"), sep = "(?=plot)", extra = "merge") %>%
tidyr::separate(Site, into = c("Site", "Mark"), sep = "(?=mark)", extra = "merge") %>%
tidyr::separate(Plot, into = c("Plot", "Mark"), sep = "(?=mark)", extra = "merge" ) %>%
mutate(species = if_else(grepl("AP", Site), "APAL", "ACER")) %>%
dplyr::rename(abundance = `%`) %>%
tidyr::drop_na(abundance) %>%
arrange(desc(abundance))
#Changing the Date to factors
vpiData$Date<-as.Date(vpiData$Date)
#Making some corrections in the naming
vpiData <- vpiData %>%
mutate_all(~gsub("Crustose coralline algae natans", "Crustose coralline algae", .)) %>%
mutate_all(~gsub("Cordata", "Chordata", .)) %>%
mutate_all(~gsub("Rubble", "Bare Substrate", .)) %>%
mutate(Site = gsub("T-AP-7pt2", "T-AP-7", Site),
Site = gsub("T-AP-7pt1", "T-AP-7", Site),
Site = gsub("T-AP-17pt2", "T-AP-17", Site),
Site = gsub("T-AP-17pt1", "T-AP-17", Site),
Site = gsub("T-AP-16pt2", "T-AP-16", Site),
Site = gsub("T-16pt1", "T-16", Site),
Site = gsub("T-16pt2", "T-16", Site),
Site = gsub("T-17pt1", "T-17", Site),
Site = gsub("T-17pt2", "T-17", Site),
Site = gsub("T-17pt3", "T-17", Site),
Site = gsub("T-17pt4", "T-17", Site),
Site = gsub("T-AP-13pt2", "T-AP-13", Site),
Site = gsub("T-AP-13pt1", "T-AP-13", Site),
Site = gsub("T-AP-14pt1", "T-AP-14", Site),
Site = gsub("T-AP-14pt2", "T-AP-14", Site),
Site = gsub("T-12a", "T-12", Site),
Site = gsub("T-12b", "T-12", Site),
Site = gsub("T-13a", "T-13", Site),
Site = gsub("T-13b", "T-13", Site),
Site = gsub("T-AP-3a", "T-AP-3", Site)
) %>%
mutate_all(~gsub("Other|Review|None", NA, .))
# Changing other columns to factors
vpiData <- vpiData %>%
mutate(across(c(Site, class, timePoint, species), as.factor)) %>%
mutate(Date = as.Date(Date)) %>%
mutate(count = as.numeric(count)) %>%
select(Date, Site, timePoint, species, class, count)
# Changing the factor level of timePoint to be chronological
vpiData <- vpiData %>%
mutate(timePoint = factor(timePoint, levels = levels(timePoint)[c(2,1)]))
vpiData
vpiData2 <- vpiData %>%
dplyr::filter(class != c("NA")) %>%
droplevels() %>%
group_by(Site,timePoint, species, class) %>%
dplyr::summarise(totalCount = sum(count)) %>%
ungroup() %>%
group_by(Site,timePoint) %>%
dplyr::mutate(totalObservations = sum(totalCount, na.rm = TRUE)) %>%
ungroup() %>%
group_by(Site,timePoint, class) %>%
dplyr::mutate(abundance = ((totalCount/totalObservations)*100))
vpiData2 <- data.table(vpiData2)
vpiData2[, `:=`(class, reorder(class, abundance))]
# vpiData2$class <- drop_na(vpiData2$class)
ACER <- vpiData2 %>%
filter(species == "ACER") %>%
filter(abundance > 1) %>%
droplevels() %>%
mutate(Site = factor(Site, levels = rev(mixedsort(levels(Site)))))
APAL <- vpiData2 %>%
filter(species == "APAL") %>%
filter(abundance > 1) %>%
droplevels() %>%
mutate(Site = factor(Site, levels = rev(mixedsort(levels(Site)))))
acerStack1 <- ggplot(ACER, aes(x = timePoint, y = abundance))+
geom_bar(aes(fill = factor(class)), position = position_stack(reverse = FALSE), stat = 'identity', color = 'black', alpha = 0.8)+
ylim(0,100)+
labs(y = "Relative Abundance (%)", fill = "Class", title = "Relative Species Abundance > 1%", x = "Time Point")+
scale_x_discrete(labels = c("Baseline", "12 Month"))+
# scale_y_reverse()+
facet_wrap(.~Site, scales = 'free')
acerStack <- acerStack1 + theme(
# Title
plot.title = element_text(size = 40, face = "bold"),
# X Axis
axis.text.x = element_text(size = 15, colour = "black", vjust = 0.5, hjust = 0.5, face= "bold"),
axis.title.x = element_blank(),
# Y Axis
axis.title.y = element_text(size = 40, face = "bold"),
axis.text.y = element_text(colour = "black", size = 30, face = "bold"),
# Axis Lines and Ticks
axis.line = element_line(colour = "black"),
axis.ticks = element_line(color="black"),
# Legend
legend.title = element_text(size = 40, face = "bold"),
legend.text = element_text(size = 36, face = "bold", colour = "black"),
legend.position = "right",
# Grid and Background
panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "white"),
panel.background = element_rect(fill = '#F5F5F5'),
# Text
text = element_text(size=40, color="black"))
acerStack
apalStack1 <- ggplot(APAL, aes(x = timePoint, y = abundance))+
geom_bar(aes(fill = factor(class)), position = position_stack(reverse = FALSE), stat = 'identity', color = 'black', alpha = 0.8)+
ylim(0,100)+
labs(y = "Relative Abundance (%)", fill = "Class", title = "Relative Species Abundance > 1%", x = "Time Point")+
scale_x_discrete(labels = c("Baseline", "12 Month"))+
# scale_y_reverse()+
facet_wrap(.~Site, scales = 'free')
apalStack <- apalStack1 +theme(
# Title
plot.title = element_text(size = 40, face = "bold"),
# X Axis
axis.text.x = element_text(size = 15, colour = "black", vjust = 0.5, hjust = 0.5, face= "bold"),
axis.title.x = element_blank(),
# Y Axis
axis.title.y = element_text(size = 40, face = "bold"),
axis.text.y = element_text(colour = "black", size = 30, face = "bold"),
# Axis Lines and Ticks
axis.line = element_line(colour = "black"),
axis.ticks = element_line(color="black"),
# Legend
legend.title = element_text(size = 40, face = "bold"),
legend.text = element_text(size = 36, face = "bold", colour = "black"),
legend.position = "right",
# Grid and Background
panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "white"),
panel.background = element_rect(fill = '#F5F5F5'),
# Text
text = element_text(size=40, color="black"))
apalStack
comboPlot <- acerStack/apalStack + plot_layout(guides = 'collect')
ggsave("../figures/comboPlot.png", plot = comboPlot, width = 20, height = 15, units = 'in', dpi = 600)
ggsave("../figures/acerStackVPI.png", plot = acerStack, width = 20, height = 15, units = 'in', dpi = 600)
ggsave("../figures/apalStackVPI.png", plot = apalStack, width = 20, height = 15, units = 'in', dpi = 600)
view(vpiData2)
vpiMat <- vpiData2 %>%
group_by(Site, timePoint, species, class)
vpiMat <- vpiData2 %>%
group_by(Site, timePoint, species, class) %>%
# dplyr::summarise(totalCount = sum(count)) %>%
na.omit(class)
vpiMat <- vpiData2 %>%
group_by(Site, timePoint, species, class) %>%
# dplyr::summarise(totalCount = sum(count)) %>%
na.omit(class) %>%
tidyr::unite(sample, 1:3)
view(vpiMat)
vpiMat <- vpiData2 %>%
group_by(Site, timePoint, species, class) %>%
# dplyr::summarise(totalCount = sum(count)) %>%
na.omit(class) %>%
tidyr::unite(sample, 1:3) %>%
spread(class,totalCount)
vpiMat <- vpiData2 %>%
select(Site, timePoint, species, class, totalCount) %>%
group_by(Site, timePoint, species, class) %>%
# dplyr::summarise(totalCount = sum(count)) %>%
na.omit(class) %>%
tidyr::unite(sample, 1:3)
vpiMat <- vpiData2 %>%
select(Site, timePoint, species, class, totalCount)
view(vpiMat)
vpiMat <- vpiData2 %>%
select(Site, timePoint, species, class, totalCount) %>%
group_by(Site, timePoint, species, class) %>%
# dplyr::summarise(totalCount = sum(count)) %>%
na.omit(class) %>%
tidyr::unite(sample, 1:3) %>%
spread(class,totalCount) %>%
replace(is.na(.), 0) %>%
column_to_rownames(var = 'sample')
view(vpiMzat)
view(vpiMat)
vpiMat <- vpiData2 %>%
select(Site, timePoint, species, class, totalCount) %>%
group_by(Site, timePoint, species, class) %>%
# dplyr::summarise(totalCount = sum(count)) %>%
na.omit(class) %>%
tidyr::unite(sample, 1:3) %>%
spread(class,totalCount) %>%
replace(is.na(.), 0) %>%
column_to_rownames(var = 'sample')
dist_matrix <- as.matrix(bcdist(vpiMat),byrow = TRUE)
dist_tbl <- dist_matrix %>%
as_tibble(rownames = 'samples')
samples <- dist_tbl %>%
select(samples)
samples_lookup <- dist_tbl %>%
select(samples) %>%
separate(col = samples, into = c("date", "site", "timePoint", "species"), sep = "_", remove = FALSE)
dist_tbl %>%
pivot_longer(cols = -samples, names_to = "b", values_to = "distances") %>%
pivot_wider(names_from = "b", values_from = "distances")
dist_matrix <- dist_tbl %>%
pivot_longer(cols=-samples, names_to="b", values_to="distances") %>%
inner_join(., samples_lookup, by="samples") %>%
inner_join(., samples_lookup, by=c("b" = "samples")) %>%
# filter(day.x %in% days_wanted & day.y %in% days_wanted) %>%
select(samples, b, distances) %>%
pivot_wider(names_from="b", values_from="distances") %>%
select(-samples) %>%
as.dist()
samples_lookup <- dist_tbl %>%
select(samples) %>%
separate(col = samples, into = c("site", "timePoint", "species"), sep = "_", remove = FALSE)
dist_tbl %>%
pivot_longer(cols = -samples, names_to = "b", values_to = "distances") %>%
pivot_wider(names_from = "b", values_from = "distances")
dist_matrix <- dist_tbl %>%
pivot_longer(cols=-samples, names_to="b", values_to="distances") %>%
inner_join(., samples_lookup, by="samples") %>%
inner_join(., samples_lookup, by=c("b" = "samples")) %>%
# filter(day.x %in% days_wanted & day.y %in% days_wanted) %>%
select(samples, b, distances) %>%
pivot_wider(names_from="b", values_from="distances") %>%
select(-samples) %>%
as.dist()
pcoa <- cmdscale(dist_matrix, k = 2, eig = TRUE, add = TRUE) # add k = 3, k = 5 to add columns, default is k=2
positions <- pcoa$points
colnames(positions) <- c("pcoa1", 'pcoa2')
# calculating the amount of variation explained by each dimension
percentExplained <- 100 * (pcoa$eig / sum(pcoa$eig))
#rounding and trimming to add to labels
RoundPercentExplained <- format(round(percentExplained[1:2], digits = 1), nsmall = 1, trim = TRUE)
# creating label vector
labs <- c(glue("PCo 1 ({RoundPercentExplained[1]}%)"),
glue("PCo 2 ({RoundPercentExplained[2]}%)"))
treatmentCentroid <- positions %>% as_tibble(rownames='samples') %>%
inner_join(., samples_lookup, by = 'samples') %>%
group_by(timePoint) %>%
dplyr::summarise(axis1 = mean(pcoa1),
axis2 = mean(pcoa2))
#
pcoaTbl <- positions %>% as_tibble(rownames='samples') %>%
inner_join(., samples_lookup, by = 'samples')
pcoaPlot1 <- ggplot() +
geom_point(data = pcoaTbl, mapping = aes(x = pcoa1, y = pcoa2, color = timePoint, shape = timePoint), size = 3) +
geom_point(data = treatmentCentroid, mapping = aes(x = axis1, y = axis2, color = timePoint), shape = 15, size = 5) +
labs(x = labs[1], y = labs[2])
pcoaPlot2 <- ggplot(pcoaTbl, aes(x = pcoa1, y = pcoa2, color = species, fill = species)) +
stat_ellipse(geom = 'polygon', alpha = 0.2, level = 0.75, show.legend = FALSE) +
geom_point(aes(x = pcoa1, y = pcoa2, shape = timePoint), alpha = 1, size = 3) +
# geom_point(data = treatmentCentroid, mapping = aes(x = axis1, y = axis2, color = treatment), shape = 15, size = 5) +
labs(x = labs[1], y = labs[2])
pcoaPlot2
ggsave("../figures/pcoaPlot2.png", plot = comboPlot, width = 20, height = 15, units = 'in', dpi = 600)
getwd()
ggsave("../figures/pcoaPlot2.png", plot = pcoaPlot2, width = 20, height = 15, units = 'in', dpi = 600)
pcoaPlot1 <- pcoaPlot2 + theme(
# Title
plot.title = element_text(size = 40, face = "bold"),
# X Axis
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_text(size = 20, face = "bold"),
# Y Axis
axis.title.y = element_text(size = 20, face = "bold"),
axis.text.y = element_text(colour = "black", size = 20, face = "bold"),
# Axis Lines and Ticks
axis.line = element_line(colour = "black"),
axis.ticks = element_line(color="black"),
# Legend
legend.title = element_text(size = 20, face = "bold"),
legend.text = element_text(size = 20, face = "bold", colour = "black"),
legend.position = "bottom",
# Grid and Background
panel.grid.major = element_line(size = 0.3, linetype = 'solid', colour = "black"),
panel.background = element_rect(fill = 'white'),
# Text
text = element_text(size=20, color="black"))
ggsave("../figures/pcoaPlot.png", plot = pcoaPlot1, width = 20, height = 15, units = 'in', dpi = 600)
view(samplesLookupPerm)
samplesLookupPerm
samplesLookupPerm <- vpiMat1 %>%
rownames_to_column(var = "samples") %>%
select(samples) %>%
separate(col = samples, into = c("date", "timePoint", "year", "site", "treatment", "reef"), sep = "_", remove = FALSE) %>%
column_to_rownames(var = "samples")
set.seed(9999)
vpiMat1 <- vpiMat %>%
select(-c(`Bare Substrate`))
samplesLookupPerm <- vpiMat1 %>%
rownames_to_column(var = "samples") %>%
select(samples) %>%
separate(col = samples, into = c("date", "timePoint", "year", "site", "treatment", "reef"), sep = "_", remove = FALSE) %>%
column_to_rownames(var = "samples")
knitr::opts_chunk$set(warning = FALSE, fig.align = 'left')
library(magrittr)
if (!require("pacman")) install.packages("pacman")
pacman::p_load("ggplot2", "officer", "ggpubr", "rcompanion", "RColorBrewer", "patchwork", "magrittr", "reshape2", "stringr", "plyr", "dplyr", "flextable", "tidyr", "tibble", "vegan", "forcats", "readr", "metafolio", "FSA", "viridis", "paletteer", 'tidyverse', "ecodist", "glue")
pacman::p_load_gh("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
read_plus <- function(flnm) {
read_csv(flnm) %>%
mutate(filename = flnm)
}
vpiData1 <-
list.files(path = "../data/vpi", pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.))
# Sort out data to have proper columns for all the info i want e.g. site, date etc
vpiData <- vpiData1 %>%
tidyr::separate(filename, into=c("Date", "Site"),extra = 'merge',sep = 23) %>%
tidyr::separate(Date, into=c("remove", "Date"),sep = "../data/vpi/") %>%
tidyr::separate(Date, into=c("Date", "remove"),sep = 10) %>%
tidyr::separate(Site, into = c("Site", "delete"),sep = 5) %>%
dplyr::select(-c(remove, delete)) %>%
mutate_if(is.character, str_replace_all, pattern = "_", replacement = "-") %>%
dplyr::rename(abundance = `%`) %>%
tidyr::drop_na(abundance) %>%
mutate(Date = factor(Date), Site = factor(Site), timePoint = factor(timePoint), year = factor(year))
#Making some corrections in the naming
vpiData <- vpiData %>%
mutate_all(~gsub("Crustose coralline algae natans", "Crustose coralline algae", .)) %>%
mutate_all(~gsub("Cordata", "Chordata", .)) %>%
mutate_all(~gsub("Rubble", "Bare Substrate", .)) %>%
mutate_all(~gsub("Other|Review|None", NA, .))
vpiData<- na.omit(vpiData)
vpiData$class <- as.factor(vpiData$class)
vpiData$class <-  droplevels.factor(vpiData$class)
vpiData$treatment = if_else(vpiData$Site %in% c("IC-C2", "IC-Z1", "IC-U1"), "Control","Outplanted")
vpiData$reef = if_else(vpiData$Site %in% c("IC-C1", "IC-C2", "IC-C3"), "SiteC",
if_else(vpiData$Site %in% c("IC-U1", "IC-U2", "IC-U3"), "SiteU", "SiteZ"))
vpiData$reef <- as.factor(vpiData$reef)
vpiData <- vpiData %>%
select(Date, timePoint, year, Site, treatment, reef, class, count, abundance) %>%
mutate(Date = as.Date(Date)) %>%
mutate(count = as.numeric(count), abundance = as.numeric(abundance)) %>%
mutate(across(where(is.character), factor))
head(vpiData)
vpiMat <- vpiData %>%
select(-c(abundance)) %>%
tidyr::unite(sample, 1:6) %>%
spread(class,count) %>%
replace(is.na(.), 0) %>%
# mutate_at(c('sample'), as.character) %>%
column_to_rownames(var = 'sample')
dist_matrix <- as.matrix(bcdist(vpiMat),byrow = TRUE)
dist_tbl <- dist_matrix %>%
as_tibble(rownames = 'samples')
samples <- dist_tbl %>%
select(samples)
samples_lookup <- dist_tbl %>%
select(samples) %>%
separate(col = samples, into = c("date", "timePoint", "year", "site", "treatment", "reef"), sep = "_", remove = FALSE)
dist_tbl %>%
pivot_longer(cols = -samples, names_to = "b", values_to = "distances") %>%
pivot_wider(names_from = "b", values_from = "distances")
dist_matrix <- dist_tbl %>%
pivot_longer(cols=-samples, names_to="b", values_to="distances") %>%
inner_join(., samples_lookup, by="samples") %>%
inner_join(., samples_lookup, by=c("b" = "samples")) %>%
# filter(day.x %in% days_wanted & day.y %in% days_wanted) %>%
select(samples, b, distances) %>%
pivot_wider(names_from="b", values_from="distances") %>%
select(-samples) %>%
as.dist()
pcoa <- cmdscale(dist_matrix, k = 2, eig = TRUE, add = TRUE) # add k = 3, k = 5 to add columns, default is k=2
positions <- pcoa$points
colnames(positions) <- c("pcoa1", 'pcoa2')
# calculating the amount of variation explained by each dimension
percentExplained <- 100 * (pcoa$eig / sum(pcoa$eig))
#rounding and trimming to add to labels
RoundPercentExplained <- format(round(percentExplained[1:2], digits = 1), nsmall = 1, trim = TRUE)
# creating label vector
labs <- c(glue("PCo 1 ({RoundPercentExplained[1]}%)"),
glue("PCo 2 ({RoundPercentExplained[2]}%)"))
treatmentCentroid <- positions %>% as_tibble(rownames='samples') %>%
inner_join(., samples_lookup, by = 'samples') %>%
group_by(treatment) %>%
dplyr::summarise(axis1 = mean(pcoa1),
axis2 = mean(pcoa2))
#
pcoaTbl <- positions %>% as_tibble(rownames='samples') %>%
inner_join(., samples_lookup, by = 'samples')
pcoaPlot1 <- ggplot() +
geom_point(data = pcoaTbl, mapping = aes(x = pcoa1, y = pcoa2, color = treatment, shape = timePoint), size = 3) +
geom_point(data = treatmentCentroid, mapping = aes(x = axis1, y = axis2, color = treatment), shape = 15, size = 5) +
labs(x = labs[1], y = labs[2])
pcoaPlot2 <- ggplot(pcoaTbl, aes(x = pcoa1, y = pcoa2, color = treatment, fill = treatment)) +
stat_ellipse(geom = 'polygon', alpha = 0.2, level = 0.75, show.legend = FALSE) +
geom_point(aes(x = pcoa1, y = pcoa2, shape = year), alpha = 1, size = 3) +
ggtitle("Principle Coordinate Analysis of VPI Data")+
labs(x = labs[1], y = labs[2])
pcoaPlot <- pcoaPlot2 + theme(
# Title
plot.title = element_text(size = 40, face = "bold"),
# X Axis
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_text(size = 20, face = "bold"),
# Y Axis
axis.title.y = element_text(size = 20, face = "bold"),
axis.text.y = element_text(colour = "black", size = 20, face = "bold"),
# Axis Lines and Ticks
axis.line = element_line(colour = "black"),
axis.ticks = element_line(color="black"),
# Legend
legend.title = element_text(size = 20, face = "bold"),
legend.text = element_text(size = 20, face = "bold", colour = "black"),
legend.position = "bottom",
# Grid and Background
panel.grid.major = element_line(size = 0.3, linetype = 'solid', colour = "black"),
panel.background = element_rect(fill = 'white'),
# Text
text = element_text(size=20, color="black"))
ggsave("../figures/pcoa.png", plot = pcoaPlot, width = 20, height = 15, units = 'in', dpi = 600)
tibble(pe = cumsum(percentExplained),
axis = 1:length(percentExplained)) %>%
ggplot(aes(x = axis, y = pe))+
geom_line()+
coord_cartesian(xlim = c(1,10))
set.seed(3008)
nmds <- metaMDS(dist_matrix)
scores(nmds) %>%
as_tibble(rownames='samples') %>%
inner_join(., samples_lookup, by = 'samples') %>%
ggplot(aes(x = NMDS1, y = NMDS2, color = treatment))+
geom_point()
ecoMat <- as.matrix(vpiMat)
samples_lookup <- vpiMat %>%
rownames_to_column(var = 'samples') %>%
select(samples) %>%
separate(col = samples, into = c("date", "timePoint", "year", "site", "treatment", "reef"), sep = "_", remove = FALSE)
set.seed(3008)
dist <- vegdist(ecoMat, method = 'bray')
nmds <- metaMDS(dist)
scores(nmds) %>%
as_tibble(rownames = 'samples') %>%
inner_join(., samples_lookup, by = 'samples') %>%
ggplot(aes(x = NMDS1, y = NMDS2, shape = treatment, color = reef))+
geom_point()
set.seed(9999)
vpiMat1 <- vpiMat %>%
select(-c(`Bare Substrate`))
view(vpiMat1)
samplesLookupPerm <- vpiMat1 %>%
rownames_to_column(var = "samples") %>%
select(samples) %>%
separate(col = samples, into = c("date", "timePoint", "year", "site", "treatment", "reef"), sep = "_", remove = FALSE) %>%
column_to_rownames(var = "samples")
samplesLookupPerm
view(samplesLookupPerm)
vpiDist <- vegdist(vpiMat1, method = 'bray')
vpiDist
distPerm <- adonis2(vpiDist ~ treatment*year*reef*timePoint, data = samplesLookupPerm, permutations = 9999, method = 'bray')
# strata = $Site
distPerm
names(vpiData2)
distPerm <- adonis2(vpiDist ~ treatment*year*timePoint, data = samplesLookupPerm, permutations = 9999, method = 'bray')
# strata = $Site
distPerm
